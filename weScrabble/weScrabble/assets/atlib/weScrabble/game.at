// game.at
// Mathijs Saey
// This file contains the implementation of the game object

//import /.at.lang.exceptions;
//import /.at.lang.types;
import ~.player;
import ~.team;

// Exceptions
deftype MaximumTeamsReached <: lobby.at.lang.types.Exception;
def  XMaximumTeamsReached := createException(MaximumTeamsReached);

// Tag representing a game
deftype Game;

/*********************
 * Object Definition *
 *********************/

/**
	A game represents the global state of the game stored by all players
*/
def game := isolate: {
	// Unique identifier of the game
	def id := "";
	// Name chosen by the person that started the game
	// does not need to be unique
	def name;
	// Contains all the teams
	def teams;
	// Reference to the local player
	def localPlayer;

	// Initialise the game, 
	def init(name, teamNames, localPlayer) {
		self.teams := [];
		self.name := name;
		self.id := generateID();
		self.addTeams: teamNames;
		self.localPlayer := localPlayer;

		teams[localPlayer.teamIdx()].addPlayer: localPlayer;
		self;
	};

	// Creates a copy of the game, with a different
	// local player, used when people join a game.
	def newPlayerInstance(player, teamIdx) {
		teams[teamIdx].addPlayer: player;
		def newInstance := clone: self;
		newInstance.localPlayer := player;
		newInstance;
	};

	// Checks if any of the teams finished the game
	def didGameEnd() {
		teams.inject: false into: {|accum, e| accum.or:{e.didTeamResolve()}}
	};

	// Checks if 2 games are the same by matching id's
	def ==(other) {
		self.id == other.id;
	};

	// Add a team to the game if there is room
	def addTeam: name {
		if: teams.length >= ~.constants.TEAM_AMOUNT 
		then: {
			raise: XMaximumTeamsReached.new("This game already has enough teams!");
		} else: {
			teams := teams + [team.new(name)];
		};
	};
	// Creates a team for each entry in a table
	def addTeams: names {
		foreach: {|t| addTeam: t} in: names;
	};

	// Generate a unique ID
	// the unique id is made out of the device id and a timestamp.
	// this guarantees no games can have the same id even if they are 
	// created at the exact same time.
	def generateID() {
		//def parent := jlobby.edu.vub.at.android.util.IATAndroid.getInstance().getParentActivity();
		//def deviceID := parent.getDeviceID();
		def time := /.at.support.timer.now().toString(); 
		//deviceID + "-" + time;
	};

} taggedAs: [Game];

/**************
 * Unit Tests *
 **************/

/**
 Unit test for the game object
 This unit test only does local testing!
*/
def gameUnitTest := extend: /.at.unit.test.UnitTest.new("game unit test") with: {
	def testP1 := activePlayer.new("testPlayer 1", 1);
	def testP2 := activePlayer.new("testPlayer 2", 2);
	def testGame := game.init("testGame", ["red", "blue"], testP1);

	def testInit() {
		self.assertNotNil(testGame.id());
		self.assertNotNil(testGame.name());
		self.assertNotNil(testGame.teams());
		self.assertNotNil(testGame.localPlayer());
	};

	def testNewInstance() {
		def test := testGame.newPlayerInstance(testP2,2);
		self.assertNotEquals(testGame.localPlayer(), test.localPlayer());
	};
};

self;