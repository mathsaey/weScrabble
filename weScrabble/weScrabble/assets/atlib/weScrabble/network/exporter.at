// exporter.at
// Mathijs Saey
// The export module is responsible for broadcasting data about the current game

import /.weScrabble.listener;
import /.weScrabble.local.game;
import /.weScrabble.local.team;

/************
 * Exporter *
 ************/

def exporter := object: { 
	def subscription;
	def game;

	// Store the local game
	// and add required listeners
	def init(game) {
	 	self.game := game;
	 	expandMethods();
	 	self.export();
	 };

	// Ensure certain methods trigger an update
	def expandMethods() {
		addListener(self.game.super, `update, self.&shouldTriggerUpdate);
		addListener(self.game.localPlayer, `resolve, self.&export);
		nil;
	};

	// This method ensures that the game only gets
	// exported if something changed
	def shouldTriggerUpdate() {
		if: (game.changeOccured) then: {
			game.changeOccured := false;
			self.export();
		};
	};

	// Used when the game needs to be
	// removed from the network
	// used for testing
	def cancelExport() {
		if: subscription != nil then: {
			takeOffline: game;
			subscription.cancel();
			subscription := nil;
		};
	};

	// We export an active game as a game anybody can join
	// a normal game is exported as a game that can be used for merging.
	def export() {
		if: subscription != nil then: {
			takeOffline: game;
			subscription.cancel();
			subscription := nil;
		};

		if: self.game.isActive() then: {
			subscription := export: self.game as: ActiveGame;
		} else: {
			subscription := export: self.game as: ResolvedGame;
		};
		nil;
	};
};
/***************
 * Export List *
 ***************/

object: { 
	def exporter := exporter; 
};