// exporter.at
// Mathijs Saey
// The import module is responsible for broadcasting data about the current game

import /.weScrabble.listener;
import /.weScrabble.local.game;
import /.weScrabble.local.team;

// List all the game updates that have
// to trigger a new export here.
def gameUpdateSymbols := [
	`addTeam, 
	`updateTeams, 
	`addPlayer
	];

/************
 * Exporter *
 ************/

def exporter := object: { 
	def game;

	 def init(game) {
	 	self.game := game;
	 	expandMethods();
	 };

	// Ensure export gets called on certain game methods
	def expandMethods() {
		foreach: { |s|
			addListener(self.game, s, self.&export);
		} in: gameUpdateSymbols;
		nil;
	};

	// We export an active game as a game anybody can join
	// a normal game is exported as a game that can be used for merging.
	def export() {
		def subscription;
	
		// Ensure we only have one active export
		if: subscription != nil then: {
			subscription.cancel();
			subscription := nil;
		};
	
		// Only call if the game is "dirty"
		if: game.changeOccured then: {
			system.println("Exporting " + self.game.name());
			if: self.game.canJoinGame() then: {
				subscription := export: self.game as: ActiveGame;
			} else: {
				subscription := export: self.game as: ResolvedGame;
			};
			game.changeOccured := false;
		};
		nil;
	};
};
/***************
 * Export List *
 ***************/

object: { 
	def exporter := exporter; 
};