// importer.at
// Mathijs Saey
// The import module is responsible for finding and joining games.

import /.at.lang.exceptions;
import /.at.lang.futures;

import /.weScrabble.local.game;
import /.weScrabble.local.team;
import /.weScrabble.local.player;

deftype IndexOutOfBounds <: lobby.at.lang.types.Exception;

/************       
 * Importer *
 ************/

def importer := object: {
	def subscriptions := [];
	def gameNames := [];
	def games := [];

	// Stop all searches
	def endSearch() {
 		foreach: { |s|
 			 s.cancel();
 		} in: subscriptions;
 		subscriptions := [];
 	};

 	// Join game at index
 	def joinGame(idx, localPlayer, baseGame) {
 		def [futureGame, resGame] := makeFuture();
 		try: {
 			def tmpGame := baseGame;
 			def gameRef := games[idx];
 			tmpGame.localPlayer := localPlayer;

 			// Get some data about the remote game
 			def futureID := gameRef<-id()@Due(seconds(3));
 			def futureName := gameRef<-name()@Due(seconds(3));
 			def futureTeams := gameRef<-teams()@Due(seconds(3));
 			def futureCanJoin := gameRef<-isActive()@Due(seconds(3));

 			// When resolved, insert necessary data and resolve future
 			when: (group: [futureID, futureName, futureTeams, futureCanJoin]) becomes: { |values|
 				def [id,n,t, c] := values;
 				tmpGame.id := id;
				tmpGame.name := n;
				tmpGame.teams := t;
				tmpGame.teams[localPlayer.teamIdx()].addPlayer(localPlayer);

				// Ensure that the player didn't resolve
				if: c then: {
					// Add localplayer to the remote game 
					def addF := gameRef<-addPlayer(localPlayer, localPlayer.teamIdx())@Due(seconds(3));
					when: addF becomes: { |r|
						// Stop looking for new games
 						self.endSearch();
 						resGame.resolve(tmpGame);
 					} catch: TimeoutException using: { |e|
 						resGame.resolve(nil);
 					};	
				} else: {
					resGame.resolve(nil);
				};
 			} catch: TimeoutException using: { |e|
 					resGame.resolve(nil);
 			};
 		} catch: IndexOutOfBounds using: {|e|
 			resGame.resolve(nil);
 			nil;
 		};
 		// Return unresolved future
 		futureGame;
 	};

 	// Start looking for available games
 	def search() {
 		// Ensure we only have one active search going
 		if: subscriptions == [] then: {
 			subscriptions := subscriptions + [
 			whenever: ActiveGame discovered: { |game|
 				def nameF := game<-name()@TwoWay;
 				def idx;

 				// Only add a game if we know it's name
 				when: nameF becomes: {|n|
 					gameNames := gameNames + [n];
 					games := games + [game];
 					idx := games.length;
 				};

 				// Remove a game from the joinable games 
 				// once it disconnects
 				subscriptions := subscriptions + [
 				when: game disconnected: {
 					if: idx != nil then: {
 						idx := games.find: {|e| e == game};
 						games[idx] := 0;
 						gameNames[idx] := "_";
 						games := games.filter: {|e| !(e == 0)};
 						gameNames := gameNames.filter: {|e| !(e == "_")};
 					};
 				}];
 			}];
 		};
 	};
};

/***************
 * Export List *
 ***************/

object: {
	def importer := importer;
};