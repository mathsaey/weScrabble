// importer.at
// Mathijs Saey
// The import module is responsible for finding and joining games.

import /.at.lang.exceptions;
import /.at.lang.futures;

import /.weScrabble.local.game;
import /.weScrabble.local.team;
import /.weScrabble.local.player;

/************       
 * Importer *
 ************/

def importer := object: {
	def subscriptions := [];
	def gameNames := [];
	def games := [];

	// Stop all searches
	def endSearch() {
 		foreach: { |s|
 			 s.cancel();
 		} in: subscriptions;
 		subscriptions := [];
 	};

 	// Join game at index
 	def joinGame(idx, localPlayer, baseGame) {
 		def [futureGame, resGame] := makeFuture();
 		def tmpGame := baseGame;
 		def gameRef := games[idx];
 		tmpGame.localPlayer := localPlayer;

 		// Get some data about the remote game
 		def futureID := gameRef<-id()@TwoWay;
 		def futureName := gameRef<-name()@TwoWay;
 		def futureTeams := gameRef<-teams()@TwoWay;

 		// When resolved, insert necessary data and resolve future
 		when: (group: [futureID, futureName, futureTeams]) becomes: { |values|
 			def [id,n,t] := values;
 			tmpGame.id := id;
			tmpGame.name := n;
			tmpGame.teams := t;
			tmpGame.teams[localPlayer.teamIdx()].addPlayer(localPlayer);

			resGame.resolve(tmpGame);
 		};

 		// Add localplayer to the remote game 
 		gameRef<-addPlayer(localPlayer, localPlayer.teamIdx());

 		// Stop looking for new games
 		self.endSearch();
 		// Return unresolved future
 		futureGame;
 	};

 	// Start looking for available games
 	def search() {
 		// Ensure we only have one active search going
 		if: subscriptions == [] then: {
 			subscriptions := subscriptions + [
 			whenever: ActiveGame discovered: { |game|
 				def nameF := game<-name()@TwoWay;
 				def idx;

 				// Only add a game if we know it's name
 				when: nameF becomes: {|n|
 					gameNames := gameNames + [n];
 					games := games + [game];
 					idx := games.length;
 				};

 				// Remove a game from the joinable games 
 				// once it disconnects
 				subscriptions := subscriptions + [
 				when: game disconnected: {
 					if: idx != nil then: {
 						games[idx] := 0;
 						gameNames[idx] := "_";
 						games := games.filter: {|e| !(e == 0)};
 						gameNames := gameNames.filter: {|e| !(e == "_")};
 					};
 				}];
 			}];
 		};
 	};
};

/***************
 * Export List *
 ***************/

object: {
	def importer := importer;
};