// game.at
// Mathijs Saey
// This file contains the implementation of the game object

import /.at.lang.exceptions;

import ~.team;
import ~.player;
import ~.constants;

// Exceptions
deftype MaximumTeamsReached <: lobby.at.lang.types.Exception;
def  XMaximumTeamsReached := createException(MaximumTeamsReached);

// Tags representing a game
deftype Game;
deftype ActiveGame <: Game;
deftype ResolvedGame <: Game;

/********
 * Game *
 ********/

//A game represents the global state of the game stored by all players
def game := object: {
	// Unique identifier of the game
	def id := "";
	// Checks if a check occured since the last time 
	// the variable was set
	def changeOccured := true;
	// Name chosen by the person that started the game
	// does not need to be unique
	def name;
	// Contains all the teams
	def teams := [];
	// Reference to the local player
	def localPlayer;

	// Initialise the game, 
	def init(name, teamNames, localPlayer, deviceID) {
		self.teams := [];
		self.name := name;
		self.id := generateID(deviceID);
		self.addTeams(teamNames);
		self.localPlayer := localPlayer;

		localPlayer.game := self;
		localPlayer.setTimer();
		teams[localPlayer.teamIdx()].addPlayer(localPlayer);
		self;
	};

	def didGameEnd() {
		def res := false;
		teams.length.doTimes: {|i|
			res := res.or:{self.didTeamWin(i)};
		};
		res;
	};

	// Check if a given team won the game
	def didTeamWin(idx) {
		// See if the team is resolved
		def didTeamResolve := teams[idx].didTeamResolve;
		// See if any other team resolved
		def didOtherTeamResolve := false;
		teams.length.doTimes: {|i|
			if: i != idx then: {
				didOtherTeamResolve := didOtherTeamResolve.or:{
					teams[i].didTeamResolve
				}
			};
		};
		// If the team at idx is the only resolved team,
		// it won.
		didTeamResolve.and: {!didOtherTeamResolve};
	};

	// Add a player to the game
	def addPlayer(playerRef, idx) {
		self.teams[idx].addPlayer(playerRef);
		self.update();
	};

	// Checks if the local player finished his/her game.
	def isActive() {
		self.localPlayer.isActive();
	};

	// Add a team to the game if there is room
	def addTeam(name) {
		if: teams.length >= CONSTANTS.TEAM_AMOUNT 
		then: {
			raise: XMaximumTeamsReached.new("This game already has enough teams!");
		} else: {
			self.update();
			teams := teams + [team.new(name)];
		};
	};
	// Creates a team for each entry in a table
	def addTeams(names) {
		foreach: {|t| addTeam(t)} in: names;
	};

	// Updates all the teams
	def updateTeams(teamArray) {
		def changeOccured := false;
		teamArray.length.doTimes: { |i|
			changeOccured.or:{self.teams[i].updateTeam(teamArray[i])};
		};
		if: changeOccured then: {
			self.update();
		};
	};

	// This method is called when the game changed
	def update() {
		self.changeOccured := true;
		if: self.didGameEnd() then: {
			if: (self.didTeamWin(localPlayer.teamIdx())) then: {
				localPlayer.didTeamWin := true;
			} else: {
				localPlayer.didTeamWin := false;
			};
		};
	};

	// Generate a unique ID
	// the unique id is made out of a device id
	// this guarantees no games can have the same id even if they are 
	// created at the exact same time.
	def generateID(deviceID) {
		def time := /.at.support.timer.now().toString(); 
		deviceID + "-" + time;
	};
};

/***************
 * Export List *
 ***************/

 object: { 
	def game := game;
	def Game := Game;
	def ActiveGame := ActiveGame;
	def ResolvedGame := ResolvedGame; 
};