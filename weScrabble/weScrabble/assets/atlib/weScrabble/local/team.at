// team.at
// Mathijs Saey
// This file contains the implementation of the team object

import /.at.lang.exceptions;

// Exceptions
deftype InvalidArgument <: lobby.at.lang.types.Exception;
def  XInvalidArgument := createException(InvalidArgument);

// Tag assigned to a team object
deftype Team;

/********
 * Team *
 ********/

/**
	A team represents a group of players that can collaborate.

	A team has both active and resolved players, active players are 
	still trying to get rid of some letters while resolved players are 
	already done doing so. A team is finished once all the players are resolved.
*/
def team := isolate: {
	// Team name
	def name := "";

	// contains all the players in the team
	def activePlayers 	:= [];
	def resolvedPlayers := [];

	// Creates a new team
	def init(newName) {
		name := newName;
		activePlayers := [];
		resolvedPlayers := [];
		self;
	};

	// Returns all the players of a team
	def allPlayers() {
		activePlayers + resolvedPlayers;
	};

	// Add a player to the team
	def addPlayer: player {
		activePlayers := activePlayers + [player];
		self;
	};
	// Resolve a player.
	def resolvePlayer: player {
		resolvedPlayers := resolvedPlayers + [player];
		activePlayers := activePlayers.filter:{|p| p != player};
		self;
	};

	// This method updates it's player list based on the team
	// data of another player.
	// any new player in the active or resolved list is added.
	def updateTeam: t {
		if: (is: t taggedAs: Team)
		then: {
			foreach: { |p|
				 if: !activePlayers.contains(p)
				 then: {addPlayer: p};
			} in: t.activePlayers;
			foreach: { |p|
				 if: !resolvedPlayers.contains(p) 
				 then: {resolvePlayer: p};
			} in: t.resolvedPlayers();
		} else: {
			raise: XInvalidArgument.new("team.updateTeam(t) received non-team argument")
		};
		self;
	};

	// check if every member of the team finished
	def didTeamResolve() {
		// avoid considering an empty team as resolved by ensuring a team
		// had at least one player before being resolved
		activePlayers.isEmpty().and:{!resolvedPlayers.isEmpty()};
	};
} taggedAs: [Team];

/***************
 * Export List *
 ***************/

object: {
	def team := team;
	def Team := Team;
	def InvalidArgument := InvalidArgument;
	def XInvalidArgument := XInvalidArgument;
};