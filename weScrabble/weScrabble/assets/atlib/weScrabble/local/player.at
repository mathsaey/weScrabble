// player.at
// Mathijs Saey
// This file contains the implementation of the player object

import /.at.lang.types;
import /.at.support.util;

import ~.constants;
import ~.dictionary;

// Type tags assigned to the different
// player objects
deftype Player;
deftype ActivePlayer <: Player;
deftype ResolvedPlayer <: Player;

/*********************
 * Utility Functions *
 *********************/

// Gets a random letter 
def getRandomLetter() {
	def idx := randomNumberBetween(1, CONSTANTS.ALPHABET.length());
	CONSTANTS.ALPHABET[idx];
};
// Returns a table of length n filled with random letters
def getRandomLetters: n {
	def res [n];
	n.doTimes: {|i| res[i]:=getRandomLetter()};
	res
};
// Create an empty rack
def createRack() {[]};
// Adds a letter to the rack (a table)
def addLetter: letter toRack: rack {
	rack + [letter];
};

/**********************
 * Object Definitions *
 **********************/

/*
 A player object represents the game state of a single player 
 of the game. 
*/
def player := object: {
	// Name of the player 
	def name;
	// idx of the team the player is in.
	def teamIdx;

	def init(name, teamIdx) {
		self.name := name;
		self.teamIdx := teamIdx;
		self;
	};

	// Checks if the game can still be joined
	// only true for active players
	def canJoinGame() {
		false;
	};
} taggedAs: [Player];

/**
 An activePlayer object represents a player currently still playing
 the game, on top of the regular data, it also stores the rack and letters
*/
def activePlayer := extend: player with: {
	// The rack is the table that contains the word being formed
	def rack := [];
	// The letters is a table containing the letters the player still has to use
	def letters := [];

	def init(playerName, teamIdx) {
		super^init(playerName,teamIdx);
		self.rack := createRack();
		self.letters := getRandomLetters: CONSTANTS.LETTER_AMOUNT;
		self;
	};

	def canJoinGame() {
		true;
	};

	// Checks if the rack currently contains a valid word
	def checkRack: rack {
		findWord: rack.implode();
	};

} taggedAs: [ActivePlayer];

/**
 A resolved player object represents a player that used all his letters
 it is created from an active player object, and uses the same super slot.
 Resolved players can no longer participate in the game an new players cannot
 join a game through a player that already finished playing.
*/
def resolvedPlayer := extend: player with: {
	// the resolvetime represents when the game was resolved
	def resolveTime;

	def init(activePlayer) {
		super := activePlayer.super;
		self.resolveTime := 1;
		self;
	};
} taggedAs: [ResolvedPlayer];


/***************
 * Export List *
 ***************/

object: {
	def player := player; 
	def Player := Player; 
	def activePlayer := activePlayer;
	def ActivePlayer := ActivePlayer; 
	def resolvedPlayer := resolvedPlayer; 
	def ResolvedPlayer := ResolvedPlayer
};