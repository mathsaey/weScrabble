// player.at
// Mathijs Saey
// This file contains the implementation of the player objects

import /.at.lang.types;
import /.at.support.util;
import /.at.support.timer;

import ~.constants;
import ~.dictionary;

/*********************
 * Utility Functions *
 *********************/

// Gets a random letter 
def getRandomLetter() {
	def idx := randomNumberBetween(1, CONSTANTS.ALPHABET.length());
	CONSTANTS.ALPHABET[idx];
};

// Returns a table of length n filled with random letters
def getRandomLetters(n) {
	def res [n];
	n.doTimes: {|i| res[i]:=getRandomLetter()};
	res;
};

// Returns (length/2) random letters from a word
def getThrowLetters(word) {
	def n := (word.length / 2).floor();
	def currentWord := word;
	def res := [];

	n.doTimes: {|i| 
		def idx := randomNumberBetween(1, currentWord.length());
		def let := currentWord[idx];
		currentWord[idx] := "_";
		currentWord := currentWord.filter:{|l| l != "_"};
		res := res + [let];
	};
	res;
};

// Create an empty rack
def createRack() {[]};
// Adds a letter to the rack (a table)
def addLetter(letter, rack) {
	rack := rack + [letter];
};
// returns a new table without the element at idx
def removeElement(table, idx) {
	table[idx] := "_";
	def res := table.filter: { |l|
		l != "_"
	};
};

/*******************
 * Resolved Player *
 *******************/

// A resolved player object represents a player that used all his letters
def resolvedPlayer := object: {
	def didTeamWin;
	def isActive() {false;};
};

/*****************
 * Active Player *
 *****************/

// An activePlayer object represents a player that is still playing
def activePlayer := object: {

	///////////
	// Ivars //
	///////////

	// The rack is the table that contains the word being formed
	def rack := [];
	// The letters is a table containing the letters the player still has to use
	def letters := [];
	// The letters in this table were used but still need to be passed
	// to the other team.
	def pendingLetters := [];
	// Subscription that we can use to control the timer.
	def timerSubscription;

	/////////////
	// General //
	/////////////

	// Initialise the game
	def init() {
		self.rack := createRack();
		self.letters := getRandomLetters(CONSTANTS.LETTER_AMOUNT);
		self;
	};

	// Checks if there are letters left.
	// resolves if there are none.
	def shouldResolve() {
		if: ((letters == []).and:{pendingLetters == [];})
		then: {
			self.stopTimer(); 
			self.resolve()
		};
	};

	def isActive() {true};

	///////////
	// Timer //
	///////////

	// Automatically adds a block after a minute
	// of inactivity. Is cancelled by
	def setTimer() {
		if: timerSubscription != nil then: {
			timerSubscription.cancel();
		};
		timerSubscription := whenever: minutes(5) elapsed: {
			self.letters := self.letters + [getRandomLetter()];
		}
	};

	// Should be called when the timer has 
	// to be stopped completly (when resolving)
	def stopTimer() {
		if: timerSubscription != nil then: {
			timerSubscription.cancel();
		};
	};

	///////////
	// Racks //
	///////////

	// Checks if the rack currently contains a valid word
	def checkRack() {
		findWord: rack.implode();
	};

	// Remove the letters in the rack from the game
	// if they contain a valid word. 
	def emptyRack() {
		if: (self.checkRack()) then: {
			self.setTimer();
			def word := self.rack;
			self.rack := [];
			self.addPending(getThrowLetters(word));
		};
		self.shouldResolve();
		nil;
	};

	// Adds letters to the pending
	// letters table
	def addPending(letters) {
		pendingLetters := pendingLetters + letters;
	};
	// Removes the pending letters
	def flushPending() {
		pendingLetters := [];
	};
	// Adds the pending leters to the letters
	// when they can't be thrown
	def returnPending() {
		letters := letters + pendingLetters;
		self.flushPending();
	};

	// Move a letter to the rack
	def moveToRack(idx) {
		def let := letters[idx];
		rack := rack + [let];
		letters := removeElement(letters, idx);
	};

	// Moves the last letter from
	// the rack to the letters
	def removeLetterFromRack() {
		def length := rack.length;
		def let := rack[length];
		letters := letters + [let];
		self.rack := rack.select(1, length);
	};

	// Add some letters
	def addLetters(letters) {
		self.letters := self.letters + letters;
	};
	// Removes a letter from the letters table
	def removeLetterWithIdx(idx) {
		self.letters := removeElement(letters, idx);
	};
	// Look for a certain letter in the letters table
	// return it if we have that letter
	def takeLetter(letter) {
		def idx := self.letters.find:{|e| e == letter};
		def res := letter;
		if: letter != nil then: {
			self.removeLetterWithIdx(idx);
		} else: {
			res := nil;
		};
		shouldResolve();
		res;
	};
};

/**********
 * Player *
 **********/

// Represents a player, the state is determined by it's super slot
def player := extend: activePlayer with: {
	// Name of the player 
	def name;
	// Link to the game
	def game;
	// idx of the team the player is in.
	def teamIdx;

	// Initialise the game
	// Note that game should be set after initialisation
	// once a game has been made
	def init(name, teamIdx) {
		super^init();
		self.name := name;
		self.teamIdx := teamIdx;
		self;
	};

	// Turns the game into a resolved game
	def resolve() {
		self.game.teams[teamIdx].resolvePlayer(self);
		self.super := resolvedPlayer;
		self;
	};
};

/***************
 * Export List *
 ***************/

object: {
	def player := player; 
	def activePlayer := activePlayer;
	def resolvedPlayer := resolvedPlayer; 
};