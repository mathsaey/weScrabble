// player.at
// Mathijs Saey
// This file contains the implementation of the player unit tests

// It's worth noting that these tests (and in fact all the tests in localTests folder)
// only perform testing from a local point of view.

// only works when adding weScrabble as a path element
// from the weScrabble folder: $ iat localTests/player.at -o weScrabble=.

import /.weScrabble.local.player;
import /.weScrabble.local.game;

def playerUnitTest := extend: /.at.unit.test.UnitTest.new("player unit test") with: {
	def testPlayer;

	def setUp() {
		testPlayer := player.new("test",1);
		testPlayer.game := game.new("testGame", ["red", "blue"], testPlayer, "local");
	};
	def tearDown() {
		testPlayer := nil;
	};

	def testInit() {
		self.assertNotNil(testPlayer.letters());
		self.assertNotNil(testPlayer.teamIdx());
		self.assertNotNil(testPlayer.rack());
		self.assertNotNil(testPlayer.name());
		self.assertNotNil(testPlayer.game());
	};

	def testActive() {
		self.assertTrue(testPlayer.isActive());
		testPlayer.resolve();
		self.assertFalse(testPlayer.isActive());
	};

	def testCheckRack() {
		testPlayer.rack := ["t","r","u","e"];
		self.assertTrue(testPlayer.checkRack());
		testPlayer.rack := ["m","a","t","h","i","j","s"];
		self.assertFalse(testPlayer.checkRack());
		testPlayer.rack := ["t","r","u","e"];
		self.assertTrue(testPlayer.emptyRack().length >= 1);
	};

	def testMove() {
		testPlayer.moveToRack(1);
		self.assertTrue(testPlayer.rack.length = 1);
		self.assertFalse(testPlayer.emptyRack());
		testPlayer.removeLetterFromRack();
		self.assertTrue(testPlayer.rack.length = 0);
	};
};

playerUnitTest.runTest();

object: { 
	def playerUnitTest := playerUnitTest;
};