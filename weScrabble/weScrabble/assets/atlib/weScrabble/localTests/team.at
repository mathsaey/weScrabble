// team.at
// Mathijs Saey
// This file contains the implementation of the team unit tests

// It's worth noting that these tests (and in fact all the tests in localTests folder)
// only perform testing from a local point of view.

// only works when adding weScrabble as a path element
// from the weScrabble folder: $ iat localTests/team.at -o root=../

import /.weScrabble.local.team;

def teamUnitTest := extend: /.at.unit.test.UnitTest.new("team unit test") with: {
  def t;

  def setUp() {
    t := team.new("testTeam!");
  };
  def tearDown() {
    t := nil;
  };

  def testInit() {
  	self.assertEquals(t.activePlayers,[],"activePlayers table not empty after init!");
  	self.assertEquals(t.resolvedPlayers,[], "resolvedPlayers not empty after init!");
  };

  def testAddPlayer() {
  	t.addPlayer("test");
  	self.assertNotEquals(t.activePlayers, [], "activePlayers empty after adding player");
  };

  def testResolvePlayer() {
  	self.assertFalse(t.didTeamResolve(), "team resolved before anybody played!");
  	t.addPlayer("test");
  	t.resolvePlayer("test");
  	self.assertEquals(t.activePlayers, [], "activePlayers not empty after resolving player");
  	self.assertNotEquals(t.resolvedPlayers, [], "resolvedPlayers empty after resolving player");
  	self.assertTrue(t.didTeamResolve(), "didTeamResolve returned false");
  };

  def testAllPlayers() {
  	self.assertEquals(t.allPlayers(), [], "allPlayers should return empty table!");
  	t.addPlayer("test 1");
  	t.addPlayer("test 2");
  	t.resolvePlayer("test 3");

  	self.assertTrue(t.allPlayers().contains("test 1"), "Player 1 missing in allPlayers");
  	self.assertTrue(t.allPlayers().contains("test 2"), "Player 2 missing in allPlayers");
  	self.assertTrue(t.allPlayers().contains("test 3"), "Player 3 missing in allPlayers");
  };

  def testUpdateTeam() {
  	t.addPlayer("test 1");
  	t.addPlayer("test 2");
  	def t2 := clone: t;

  	self.assertEquals(t.activePlayers,t2.activePlayers,"error while cloning teams!");
  	self.assertEquals(t.resolvedPlayers,t2.resolvedPlayers,"error while cloning teams!");
  	self.assertEquals(t.name,t2.name,"error while cloning teams!");

  	t.resolvePlayer("test 1");
  	t2.addPlayer("test 3");

  	t.updateTeam(t2);
  	t2.updateTeam(t);
  	self.assertTrue(t.activePlayers.contains("test 3"));
  	self.assertTrue(!t2.activePlayers.contains("test 1"));
  	self.assertTrue(t2.resolvedPlayers.contains("test 1"));
  }
};

teamUnitTest.runTest();

object: { 
	def teamUnitTest := teamUnitTest;
};