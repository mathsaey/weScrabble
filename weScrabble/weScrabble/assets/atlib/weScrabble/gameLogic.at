import /.at.lang.types;
import /.at.lang.exceptions;

import ~.utils;

// Exceptions
deftype MaximumTeamsReached <: lobby.at.lang.types.Exception;
def  XMaximumTeamsReached := createException(MaximumTeamsReached);

// Other tags
deftype ActiveGame;
deftype ResolvedGame;

// Represents the game for a single player
def playerGame := object: { 
	// Each player has a name
	def name := "";
	// The rack contains the word being formed
	def rack := []; 
	// The letters contain all the letters currently in play
	def letters := [];

	def init(playerName) {
		name := playerName;
		rack := createRack();
		letters := getRandomLetters: ~.constants.LETTER_AMOUNT;
	}; 
};


// Represents the local version of the game
def game := object: {
	// identifier unique to the game
	def id;
	// a game can have a name
	def name := "";
	// Contains the name of the player
	def playerName := "";
	// Contains all teams
	def teams;

	def init() {
		id := generateID();
		teams := [];
		self;
	};

	// Add a team to the game if there is room
	def addTeam(name) {
		if: teams.length >= ~.constants.TEAM_AMOUNT 
		then: {
			raise: XMaximumTeamsReached.new("This game already has enough teams!");
		} else: {
			teams := teams + [team.new(name)];
		};
	};
	// Creates a team for each entry in a table
	def addTeams(names) {
		foreach: {|t| addTeam(t)} in: names;
	};

	// Java interfaces cannot access new
	def create() {
		self.new();
	};
	def getTag() {test};
};