// localCore.at
// Mathijs Saey
// The local core object is the general file that imports the different network 
// and local modules and calls them when necessary, it also contains the 
// local instance of the active game.

import ~.local.game;
import ~.local.team;
import ~.local.player;

import ~.network.merger;
import ~.network.exporter;
import ~.network.importer;

/*********
 * Core  *
 *********/

def core := object: { 
	def currentGame;
	def localPlayer;

	// Initialises the core with the player name
	def init(playerName) {
		// The player that creates a game
		// always starts on the first team
		// the idx is modified, if the player joins a game instead
		self.localPlayer := activePlayer.new(playerName,1);
		self;
	};

	// Start a new game
	def startGame(gameName, teamNames) {
		// Use the device id as unique identifier.
		//def parent := jlobby.edu.vub.at.android.util.IATAndroid.getInstance().getParentActivity();
		//def deviceID := parent.getDeviceID();
		def deviceID := "tmp";
		self.currentGame := game.new(gameName, teamNames, localPlayer, deviceID);
		self.exportGame();
		self.runUpdater();
		self;
	};

	// Get the names of the games that are in range
	def getGameNames() {
		importer.search();
		importer.gameNames();
	};

	// Join a game (if it's in range)
	def joinGame(gameIdx, teamIdx) {
		localPlayer.teamIdx := teamIdx;
		currentGame := importer.joinGame(gameIdx, self.localPlayer);
		self.exportGame();
		self.runUpdater();
	};

	// Export the current game
	// recalling this serves as a refresh
	// (when changing tags)
	def exportGame() {
		export(currentGame);
	};

	// Looks for other games and merges with them
	def runUpdater() {
		merger.runUpdater(self);
	};

	// debug
	def exD() {
		self.init("Mathijs");
		self.startGame("Awesome game", ["FUCK YEAH MATHIJS", "ander team"]);
	};
	def inD(name) {
		self.init(name);
		self.getGameNames();
	}
};

// Debug
network.online();

/***************
 * Export List *
 ***************/

object: { 
	def core := core; 
};